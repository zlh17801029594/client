---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lew.
--- Group 18 analyze
--- DateTime: 2020/6/2 15:45
---
local PERS = { "A", "B", "C", "D", "E", "H" }
local REG_EET = "[A-Z][A-Z][A-Z][A-Z][0-9][0-9][0-9][0-9]"
local REG_SELCODE = '[A-HJ-MP-S][A-HJ-MP-S][A-HJ-MP-S][A-HJ-MP-S]'
local REG_ADDRESS = '[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]'
function RMK(obj)
    local ori = obj.value
    local res = locateSub(ori, "RMK")
    if (res) then
        res = 'remarks="' .. res .. '"'
    end
    return res
end

function REG(obj)
    local ori = obj.value
    return locateSub(ori, "REG")
end

function OPR(obj)
    local ori = obj.value
    return locateSub(ori, "OPR")
end

function RIF(obj)
    local ori = obj.value
    return locateSub(ori, "RIF")
end

function SEL(obj)
    local ori = obj.value
    local res = locateSub(ori, "SEL")
    if res and fullMatch(res, REG_SELCODE) then
        res = 'selectiveCallingCode="' .. res .. '"'
    else
        res = nil
    end
    return res
end

function STS(obj)
    local ori = obj.value
    return locateSub(ori, "STS")
end

function TYP(obj)
    local ori = obj.value
    return locateSub(ori, "TYP")
end

function PER(obj)
    local ori = obj.value
    local res = locateSub(ori, "PER")
    if res then
        if inTable(res, PERS) then
            res = 'aircraftApproachCategory="' .. res .. '"'
        elseif string.len(res) > 1 then
            for i = 1, string.len(res) do
                local tmpper = string.sub(res, i, i)
                if (inTable(tmpper, PERS)) then
                    res = 'aircraftApproachCategory="' .. tmpper .. '"'
                    break
                end
            end
        end
    end
    return res
end

function COM(obj)
    local ori = obj.value
    local res = locateSub(ori, "COM")
    if (res) then
        res = 'otherCommunicationCapabilities="' .. res .. '"'
    end
    return res
end

function DAT(obj)
    local ori = obj.value
    local res = locateSub(ori, "DAT")
    if (res) then
        res = 'otherDatalinkCapabilities="' .. res .. '"'
    end
    return res
end

function NAV(obj)
    local ori = obj.value
    local res = locateSub(ori, "NAV")
    if (res) then
        res = 'otherNavigationCapabilities="' .. res .. '"'
    end
    return res
end

function DEP(obj)
    local ori = obj.value
    return locateSub(ori, "DEP")
end

function DEST(obj)
    local ori = obj.value
    return locateSub(ori, "DEST")
end
function ALTN(obj)
    local ori = obj.value
    return locateSub(ori, "ALTN")
end
function RALT(obj)
    local ori = obj.value
    return locateSub(ori, "RALT")
end
function CODE(obj)
    local ori = obj.value
    local res = locateSub(ori, "CODE")
    if res and fullMatch(res, REG_ADDRESS) then
        res = 'aircraftAddress="' .. res .. '"'
        return res
    end
    return nil
end
function DLE(obj)
    local ori = obj.value
    return locateSub(ori, "DLE")
end
function ORGN(obj)
    local ori = obj.value
    return locateSub(ori, "ORGN")
end
function TALT(obj)
    local ori = obj.value
    return locateSub(ori, "TALT")
end
function DOF(obj)
    local ori = obj.value
    return locateSub(ori, "DOF")
end
function SUR(obj)
    local ori = obj.value
    local res = locateSub(ori, "SUR")
    if (res) then
        res = 'otherSurveillanceCapabilities="' .. res .. '"'
    end
    return res
end

function EET(obj)
    local ori = obj.value
    local res = locateSub(ori, "EET")
    if (res) then
        local table = {}
        table.value = res
        res = EETXML(table)
    end
    return res
end

function EETXML(obj)
    --EET/CAP0745 XYZ0830
    local eet_value = obj.value
    local res = ''
    if eet_value then
        local eets = StrSplit(eet_value, " ")
        for i, v in ipairs(eets) do
            if v and not isempty(trim(v)) and fullMatch(v, REG_EET) then
                local fix = string.sub(v, 1, string.len(v) - 4)
                local time = string.sub(v, string.len(v) - 3, string.len(v))
                if fix and time then
                    res = res .. elapsedTime(fix, time)
                end
            end
        end
    end
    return res
end

function elapsedTime(fix, time)
    local res = '<fx:estimatedElapsedTime elapsedTime="'
    if time then
        local hour = nil
        local min = nil
        if type(time) == 'string' and string.len(time) == 4 then
            if string.sub(time, 1, 1) == '0' then
                hour = string.sub(time, 2, 2)
            else
                hour = string.sub(time, 1, 2)
            end
            if string.sub(time, 3, 3) == '0' then
                min = string.sub(time, 4, 4)
            else
                min = string.sub(time, 3, 4)
            end
            res = res .. 'P0Y0M0DT' .. hour .. 'H' .. min .. 'M0S'
        else
        end
    end
    res = res .. '">'
    if fix then
        res = res .. location(fix)
    end
    res = res .. '</fx:estimatedElapsedTime>'
    return res
end

function location(fix)
    if fix then
        local res = '<fx:location>'
        res = res .. '<fx:region>'
        res = res .. fix
        res = res .. '</fx:region>'
        res = res .. '</fx:location>'
        return res
    else
        return nil
    end
end

function StrSplit(szFullString, szSeparator)
    local nFindStartIndex = 1
    local nSplitIndex = 1
    local nSplitArray = {}
    while true do
        local nFindLastIndex = string.find(szFullString, szSeparator, nFindStartIndex)
        if not nFindLastIndex then
            nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, string.len(szFullString))
            break
        end
        nSplitArray[nSplitIndex] = string.sub(szFullString, nFindStartIndex, nFindLastIndex - 1)
        nFindStartIndex = nFindLastIndex + string.len(szSeparator)
        nSplitIndex = nSplitIndex + 1
    end
    return nSplitArray
end

function locateSub(ori, mark)
    local res = nil
    if (ori and mark) then
        local mstart, mend = string.find(ori, mark .. '/')
        if (mstart) then
            local oritail = string.sub(ori, mend + 1)
            local tstart, tend = string.find(oritail, '[A-Z]+/')
            if (tstart) then
                res = string.sub(oritail, 1, tstart - 2)
            else
                res = oritail
            end
        end
    end
    return trim(res)
end

function trim(s)
    if s then
        return (s:gsub("^%s*(.-)%s*$", "%1"))
    end
    return nil
end

function inTable(value, table)
    if (table == nil) then
        return false
    end
    for i, v in pairs(table) do
        if (value == v) then
            return true
        end
    end
    return false
end

function fullMatch(String, Regex)
    if String then
        local s_start, s_stop = string.find(String, Regex)
        if s_start == 1 and s_stop == string.len(String) then
            return true
        end
    end
    return false
end
